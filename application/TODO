☐ finish resume
☐ find 20 companies
✔ design analytics @done(22-03-07 14:15)

Teams:
    ✔ view permssion @done(22-03-08 12:18)
    ✔ check for edit permission in project, monitor apis @done(22-03-08 12:13)
    ✔ api and webhook secrets not seen if view @done(22-03-08 12:16)
    ✘ verify webhook hidden and viewer can only view @cancelled(22-03-08 13:03)
    ✔ form and invite updates @done(22-03-08 13:05)
    ✔ verify @done(22-03-08 13:56)
    ✔ permission docs @done(22-03-08 14:43)

Landing: 
    ✔ add syntax highlighter for json @done(22-03-08 11:20)
    ✔ design and implement team section -> depend on view perm @done(22-03-09 11:53)

Discord:
    ☐ design for user and team
    ☐ implement
    ☐ test
    Tasks: 
        ☐ message for no integrations tab
        ☐ test slack integration
        ☐ useDiscordInstallUrl and info card in NewIntegrationsList
        ☐ DiscordInstallationInfoBar + Remove dialog + test button
        api:
            ☐  index - detach monitors with discord alerts, delete discord integ (delete webhook)
            ☐  test - execute webhook
        ☐ redirect -> integrations/discord/callback -> save webhook data -> redirect to integ page
        ☐ check if webhook alerady exists on channel before adding and check if prev webhook is deleted, if not, dont add new
        ☐ getDiscord 

Status Pages:
    ☐ status page table
    ☐ scope private, public
    ☐ define core fields, notifs, etc 

ez: 
    ✔ follow redirect default @done(22-03-08 10:01)

Marketing: 
    ✔ redesign blog section @done(22-03-08 12:01)
    ☐ write alarm post
    ☐ add to reddit saas group

App header: 
    ☐ redesign

Project overview:
    ☐ redesign, quick actions, go to
    

Uptime HTTP:
    ☐  design dashboard to show HTTP settings + alerts
    ✔  follow http redirects @done(22-01-31 13:20)
    ✔  pause function @done(22-01-31 13:58)

☐ tw space hosting tools


Usage Tab:
    ☐ project usage
    ☐ monitor usage
    ☐ unlock x by upgrading



    

✘ pause function graph weirdness @cancelled(22-02-01 12:29)

✔ scope demo page @done(22-02-02 22:38)

Demo:
    ☐  set up demo route
    ☐  create demo project, monitors, and api for getting resources

☐ scope status pages


☐  axiom logging

☐ increase data retention and view for free plan to 90 days

☐ pricing page

☐ pause button confirmation when pausing

☐ email after sign up with guide


------------------------------------------------------------------------------------------

Onboarding:
    ☐ create onboarding page
    ☐ welcome page
    define steps and fields to collect:
        ☐ where did you hear about Komonitor - Google, IndieHackers, Twitter, Reddit, word of mouth, Other
        ☐ name
        ☐ use case - Monitoring a production app/website, monitoring an API, Just looking a around
    ☐ implement form
    ☐ update user obj with form data

Sign up email:
    ☐ simplify like uptime robot

Stripe:
    ✔ change freelancer plan to pro @done(22-02-16 21:58)
    ✔ change free to starter @done(22-02-16 21:58)
Webapp: 
       
        
    Alert Invocations:
        ✔ implement get handler @done(21-10-07 14:56)
    UI:
        ☐ refactor page layout
        ✔ Style the email verification email @done(21-10-11 14:14)
        ✔ change hover color for create buttons and go to app button @10/22 @done(21-10-18 14:37)
        ☐ view invocation object modal when clicked on in invocation tables

        ☐  convert service SLA's to monitor resolutions SRE p62\


        ✘  new user onboarding -> ask what they'll use for @cancelled(22-01-12 20:17)
        ☐  add no alert warning to monitor creation form + overview page
    API: 
        ☐ check if subscriptions are valid in API's

    Webhook Alerts: 
        ☐ initial design
    SNS Topic Alerts:
        ☐ scope possibility

    SEO:

    Delete by user id:

        ☐  verify
    Website View:
        ✘  scope @cancelled(22-01-28 22:28)
    custom status pages: 
        ☐  scope
    teams: 
        ☐  scope

Customer Serve:
    ☐ notification for new users -> email template

Teams:
    ☐ scope teams

API:
    ☐ research rate limiting
    ☐ API server design (api.komonitor.com)
    API keys:
        ☐ design api key creation, storage, etc.
        ☐ research what header API keys are sent in




TEAMS: 
    ☐  search todos






Blog: 
    ☐ Ecommerce use case - high latency -> lost revenue
    ☐ Buy vs. build -> time spent on product vs. infra
    ☐ Monitoring tenets -> SRE chapter
    ☐ Twitter alert use case -> better comm with users + public

Website change monitoring:
    ☐ scope

Lighthouse:
    ✔ get hello world app running and push to ECR working @done(21-12-06 13:05)
    ✔ cdk setup DDB table in dev and prod @done(21-12-06 16:50)
    ☐ cdk Faargate task role https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/clients/client-ecs/modules/taskdefinition.html#taskrolearn
    ☐ create execution role arn https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/clients/client-ecs/modules/taskdefinition.html#executionrolearn
    Job runner: 
        ☐ read job from db
        ☐ create and register task def from db
        ☐ startTask
        ☐ dereg task def -> check if can dereg during run
    ☐ cdk setup S3 bucket
    ☐ remove lighthouse pricing impl


Bugs: 
    ☐  Warning: Prop `id` did not match. Server: "accordion-button-2" Client: "accordion-button-4" on FAQ page
    ☐  Alert invocation table can link to non existant monitor, -> fetch to see if mon exists before constructing link
    ☐  Remove aws-cdk package by rewriting nextauth ddb client
    ✔  upgrade nextauth @done(22-02-15 15:40)
    ☐  get rid of hypernext
    ☐  keyed mutates
     ☐ make monitor url unchangeable, it messes up stats 
     ☐  get rid of uptime monitor jobs
     ☐ add sweden to cdk
    ☐  consolidate useUser hooks to one api call
    ☐  consolidate db logic into one package
    ☐  color mode does not persits from docs to any other page -> check provider
    ☐ encrypt decrpyt webhook secrets in db
   

☐ product gif generation