Webapp: 
    Pricing page:
        ✔  move loading spinner to CTA buttons @done(22-01-01 07:40)
    Alert:
        ✘ email alert only to account owner @cancelled(21-12-12 19:32)
    Settings:
        
    Stripe:
        ☐ add annual plans 

    Slack: 
        ✔ create installation field on user @done(21-12-11 13:45)
        ✔ null out installation storage on installer @done(21-12-11 13:45)
        ✔ create api routes for storing fetching installations @done(21-12-16 15:16)
        ✔ create useInstallation hook that fetches installation on user @done(21-12-11 17:41)
        ✔ create delete installation api @done(21-12-16 19:56)
        ✔ uninstall app when deleting integ @done(21-12-16 21:05)
        ✔ remove slack secrets from fetch @done(21-12-16 16:28)
        ✔ switch add to slack button to delete integration if installation exists @done(21-12-16 21:05)
        ✔ save installation to user on callback @done(21-12-13 17:21)
        ✔ delete modal when delete button pressed then call delete api @done(21-12-20 19:36)
        ✘  add a change installation option that migrates alerts and deprecates current auth @cancelled(21-12-20 14:26)
        ✔ test integration API @done(21-12-21 17:29)
        ✔  test button calls api @done(21-12-21 17:29)
        ✔ check if prod Slack app is ready @done(21-12-31 08:35)
        
    Alert Invocations:
        ✔ implement get handler @done(21-10-07 14:56)
    UI:
        ✔ Style the email verification email @done(21-10-11 14:14)
        ✔ change hover color for create buttons and go to app button @10/22 @done(21-10-18 14:37)
        ☐ view invocation object modal when clicked on in invocation tables
        ✔ create a coming soon page component @10/29 @done(21-10-26 13:26)
        ✔  coming soon page redirects to roadmap page @10/29 @done(21-10-26 13:26)
        ✔ create 404 page @10/29 @done(21-10-25 14:03)
        ✘ check aws region to locations in webapp client @10/29 @started(21-10-26 13:30) @cancelled(21-10-26 13:32) @wasted(2m48s)
        ✔  timezones based on user pref @done(21-12-01 13:57)
        ☐  convert service SLA's to monitor resolutions SRE p62\
        ✔  download data as csv or json @done(21-12-09 12:13)
        ✔  Add alts to all images @done(21-11-03 15:52)
        ☐  disable alert from dashboard
        ✔  convert regions to place names @started(21-11-15 11:34) @done(21-11-15 11:56) @lasted(22m24s)
        ✔  view uptime statuses up to 30 days ago @done(21-11-15 15:29)
        ✔  fix uptime graph x axis @done(21-11-15 15:29)
        ✔  graph weirdness when switching since @done(21-11-15 15:29)
        ☐  add warning that uptime monitor has no alert in overview table

        ☐  new user onboarding -> ask what they'll use for
    API: 
        ☐ check if subscriptions are valid in API's
    Landing: 
        ✔ create a design and sections @10/22 @done(21-10-22 13:37)
        ✔ Copy @10/22 @started(21-10-26 13:42) @done(21-10-26 15:18) @lasted(1h36m23s)
        ✔ implement the design @done(21-11-02 12:01)
    Legal: 
        ✔ PP @done(21-11-11 12:46)
        ✔ TOS @done(21-11-10 12:36)
        ✘ GDPR cookie acceptance @cancelled(21-11-10 11:06)
    Signup: 
        ☐ add checkbox for agreeing to email updates on product
        ☐ store value in db
        ☐ add toggle for emails in settings
    Slack Alerts:
        ☐ Form changes when slack type is selected
        ☐ form has connect to slack button
        ☐ verify we can redirect with the form after user has added bot to workspace
        ☐ research slack auth flows
    Webhook Alerts: 
        ☐ initial design
    SNS Topic Alerts:
        ☐ scope possibility
    Docs:
        ✔ Create 3 column design @done(21-10-26 18:48)
        ✔ Set up mdx @done(21-11-05 11:17)
        ✔ define sections and subsections @done(21-11-05 11:17)
        ✔ implement sidebar nav @done(21-11-05 11:17)
        ☐ fill content
    SEO:
    SSL checks: 
        ✘ scope @cancelled(21-12-06 11:50)
    Delete by user id:
        ✔  uptime monitors @done(21-11-14 20:54)
        ✔  alerts @done(21-11-14 20:54)
        ✔  add to delete user api @done(21-11-14 20:54)
        ☐  verify
    Website View:
        ☐  scope
    custom status pages: 
        ☐  scope
    teams: 
        ☐  scope

User pref dates:
    ☐ verify alert TZ

Uptime HTTP:
    ✔  design new creation and edit form @done(21-12-06 11:49)
    ✔ implement HTTP headers in model @done(21-12-01 14:21)
    ✔  add HTTP headers to check in lambda @done(21-12-01 14:33)
    ✔  remove retries param from model @done(21-12-01 13:06)
    ✔  remove retries from lambda @done(21-12-01 13:01)
    ✔  remove retries from verification and create and edit forms @done(21-12-01 13:06)
    ✔  add HTTP headers to forms @done(21-12-06 11:49)
    ☐  design dashboard to show HTTP settings
    ☐  add HTTP methods to model
    ☐  add HTTP methods in check lambda
    ☐  add HTTP methods to forms
    ☐  add HTTP body to model
    ☐  add HTTP body to check lambda
    ☐  add HTTP body to form

Uptime Alerts: 
    ☐ aattach multiple alerts to monitor

Alerts:
    ✔  do not resend down alerts -> add ongoing field to invocation @done(21-12-30 12:34)
    ✔  switch ongoing alert invoke to false upon alert deletion, monitor detachment @done(21-12-31 09:46)
    ✔  monitor alerts page -> show ongoing @done(21-12-30 13:11)

Blog: 
    ☐ Ecommerce use case - high latency -> lost revenue
    ☐ Buy vs. build -> time spent on product vs. infra
    ☐ Monitoring tenets -> SRE chapter
    ☐ Twitter alert use case -> better comm with users + public

Uptime Lambda:
    ✔ invoke alert lambda on monitor failure with monitor id and owner id @done(21-10-17 22:14)
    ✔ add status codes to status updates @done(21-12-01 13:29)
    ✔ use user agent Komonitor @10/22 @done(21-10-18 14:31)
    ✔ investigate response times @done(21-10-19 19:54)
    ☐ add response data to status req

Website change monitoring:
    ☐ scope

Lighthouse:
    ✔ get hello world app running and push to ECR working @done(21-12-06 13:05)
    ✔ cdk setup DDB table in dev and prod @done(21-12-06 16:50)
    ☐ cdk Faargate task role https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/clients/client-ecs/modules/taskdefinition.html#taskrolearn
    ☐ create execution role arn https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/clients/client-ecs/modules/taskdefinition.html#executionrolearn
    Job runner: 
        ☐ read job from db
        ☐ create and register task def from db
        ☐ startTask
        ☐ dereg task def -> check if can dereg during run
    ☐ cdk setup S3 bucket
    ☐ remove lighthouse pricing impl

CDK:
    ✔ create the prod ddb tables in us-east-1 @started(21-11-15 11:33) @done(21-11-30 13:14) @lasted(2w1d1h41m11s)
    ✔ create us-east-1 prod stack @started(21-11-15 11:34) @done(21-11-30 13:14) @lasted(2w1d1h40m12s)

Prod Stack:
    ✔ abstract lambdas @done(21-11-30 13:14)
    ✔ abstract rules @done(21-11-25 21:01)
    ✔ lambdas call us-east-1 db but refer to each other @done(21-11-30 13:14)

Logging and Error Handling:
    ✔ Decide logging strategy for webapp @10/29 @done(21-11-30 13:14)
    ✔ replace console.log/error in webapp with logging provider @done(21-11-30 13:14)
    ✔ Decide logging strategy for lambdas and implement @done(21-11-30 13:14)

Bugs: 
    ☐  Warning: Prop `id` did not match. Server: "accordion-button-2" Client: "accordion-button-4" on FAQ page
    ☐  Alert invocation table can link to non existant monitor, -> fetch to see if mon exists before constructing link
    ☐  Remove aws-cdk package by rewriting nextauth ddb client
    ☐  upgrade nextauth
    ☐  keyed mutates
     ☐ make monitor url unchangeable, it messes up stats 
     ☐  get rid of uptime monitor jobs

☐ hire in public
☐ product gif generation